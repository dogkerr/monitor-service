// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package queries

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type ContainerStatus string

const (
	ContainerStatusRUN  ContainerStatus = "RUN"
	ContainerStatusSTOP ContainerStatus = "STOP"
)

func (e *ContainerStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ContainerStatus(s)
	case string:
		*e = ContainerStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ContainerStatus: %T", src)
	}
	return nil
}

type NullContainerStatus struct {
	ContainerStatus ContainerStatus
	Valid           bool // Valid is true if ContainerStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullContainerStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ContainerStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ContainerStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullContainerStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ContainerStatus), nil
}

type DashboardType string

const (
	DashboardTypeLog     DashboardType = "log"
	DashboardTypeMonitor DashboardType = "monitor"
)

func (e *DashboardType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DashboardType(s)
	case string:
		*e = DashboardType(s)
	default:
		return fmt.Errorf("unsupported scan type for DashboardType: %T", src)
	}
	return nil
}

type NullDashboardType struct {
	DashboardType DashboardType
	Valid         bool // Valid is true if DashboardType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDashboardType) Scan(value interface{}) error {
	if value == nil {
		ns.DashboardType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DashboardType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDashboardType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DashboardType), nil
}

type Container struct {
	ID             uuid.UUID
	UserID         uuid.UUID
	Image          string
	Status         ContainerStatus
	Name           string
	ContainerPort  int32
	PublicPort     sql.NullInt32
	TerminatedTime sql.NullTime
	CreatedTime    time.Time
	ServiceID      string
}

type ContainerLifecycle struct {
	ID          uuid.UUID
	ContainerID uuid.NullUUID
	StartTime   time.Time
	StopTime    sql.NullTime
	Status      ContainerStatus
	Replica     int32
}

type ContainerMetric struct {
	ID             uuid.UUID
	ContainerID    uuid.UUID
	Cpus           float64
	Memory         float64
	NetworkIngress float64
	NetworkEgress  float64
}

type Dashboard struct {
	ID     uuid.UUID
	Uid    string
	Owner  uuid.UUID
	DbType DashboardType
}

type User struct {
	ID       uuid.UUID
	Username string
	Email    string
	Fullname string
	Password string
}
